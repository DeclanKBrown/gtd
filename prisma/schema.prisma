generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                     String      @id @default(cuid())
  email                  String      @unique
  stripeCustomerId       String?     @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?     @unique @map("stripe_subscription_id")
  stripePriceId          String?     @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?   @map(name: "stripe_current_period_end")
  Task                   Task[]
  Project                Project[]
  Reference              Reference[]
  Review                 Review[]
  Context                Context[]
  Area                   Area[]
}

enum TaskStatus {
  INBOX
  SOMEDAY
  WAITING
  NEXT_ACTION
  DONE
  DELEGATED
  ELIMINATED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id              String     @id @default(cuid())
  name            String
  status          TaskStatus @default(INBOX)
  goalCompletedAt DateTime   @default(now())
  priority        Priority   @default(LOW)
  Project         Project?   @relation(fields: [projectId], references: [id])
  projectId       String?
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  completedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum ProjectStatus {
  NOT_STARTED
  ACTIVE
  COMPLETED
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String
  status      ProjectStatus
  tasks       Task[]
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ReferenceStatus {
  ACTIVE
  ARCHIVED
}

model Reference {
  id        String          @id @default(cuid())
  name      String
  note      String?
  url       String?
  status    ReferenceStatus
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  started   Boolean  @default(true)
  stepOne   Boolean  @default(false)
  stepTwo   Boolean  @default(false)
  stepThree Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Context {
  id        String   @id @default(cuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Area {
  id        String   @id @default(cuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
